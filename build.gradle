import javax.net.ssl.HttpsURLConnection
import java.nio.file.Files

plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
    id "io.freefair.lombok" version "6.0.0-m2"
}

version = "${project.mod_version}-${project.minecraft_version}"
group = project.maven_group

Properties additionalProperties = new Properties()
if (file("extra.properties").exists()) {
    additionalProperties.load(file("extra.properties").newReader())
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "com.github.DarkKronicle:DarkKore:main-SNAPSHOT"

    modCompileOnly "io.github.prospector:modmenu:${project.modmenu_version}"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 17
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

task discord {
    dependsOn build

    doLast {
        String webhook
        if (additionalProperties["discord_webhook"] != null) {
            webhook = additionalProperties["discord_webhook"]
        } else if (System.getenv("discord_webhook") != null) {
            webhook = System.getenv("discord_webhook")
        } else {
            System.out.println("No webhook found...")
            return
        }

        String commitHash = 'git rev-parse --verify --short HEAD'.execute().text.trim()

        File file = remapJar.archiveFile.get().asFile
        String fileName = "$project.archives_base_name}-${project.mod_version}-${commitHash}.jar"
        String text = "<:Kronos:799707832399691867> **${project.archives_base_name} v${project.mod_version}-${commitHash} for ${project.minecraft_version}**"
        URL url = new URL(webhook)
        HttpsURLConnection connection = (HttpsURLConnection) url.openConnection()

        def cmdLine = "git log --format=%B -n 1"
        def procCommit = cmdLine.execute()
        String changeLog = procCommit.in.getText()
        text = text + "\n" + changeLog

        String boundary = UUID.randomUUID().toString()
        connection.setRequestMethod("POST")
        connection.setDoOutput(true)
        connection.setRequestProperty("Content-Type", "multipart/form-data;boundary=" + boundary)
        DataOutputStream stream = new DataOutputStream(connection.getOutputStream());

        stream.writeBytes("--" + boundary + "\r\n")
        stream.writeBytes("Content-Disposition: form-data; name=\"file\"; filename=\"" + fileName + "\"\r\n\r\n")
        stream.write(Files.readAllBytes(file.toPath()))
        stream.writeBytes("\r\n")
        stream.writeBytes("--" + boundary + "\r\n");
        stream.writeBytes('Content-Disposition: form-data; name="content"\r\n\r\n' + text + '\r\n')
        stream.writeBytes("--" + boundary + "--\r\n")

        stream.flush()
        stream.close()

        connection.getInputStream().close()
        connection.disconnect()
    }

}
